{"version":3,"sources":["components/RouterButton.tsx","util/config.ts","AuthButton.tsx","services/status.ts","BoardCheckbox.tsx","services/boards.ts","services/subscribeEvents.ts","BoardList.tsx","SourcePage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RouterButton","handleClick","title","Button","variant","color","onClick","host","authUrl","AuthButton","status","handleStatus","history","useHistory","w","window","callback","param","a","console","error","url","location","href","indexOf","queryString","split","replace","parsed","qs","parse","hashParam","substring","parsedHash","Axios","post","ret","log","localStorage","setItem","data","rtk","open","render","to","pathname","state","from","getTeamStatus","BoardCheckbox","board","selected","handleSelect","id","name","desc","checked","Checkbox","onChange","getBoardsList","rid","get","headers","subscribeEvents","events","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","width","height","backgroundColor","palette","background","default","gridList","gridChild","alignItems","fontSize","boardsReducer","boards","action","type","selectedBoardsReducer","selectedBoards","el","filter","e","push","BoardList","classes","useReducer","dispatch","dispatchSelected","useEffect","hook","getItem","fetchBoards","boardId","useState","subscribeStatus","setSubscribeStatus","handleSubscribe","useCallback","teamId","subscribe","className","GridList","cellHeight","cols","map","b","GridListTile","key","SourcePage","App","setStatus","fetchStatus","style","exact","path","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b336f23.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface RouterButtonProps {\n  title: string;\n  handleClick: () => void;\n}\n\nconst RouterButton: React.FunctionComponent<RouterButtonProps> = ({\n  handleClick,\n  title,\n}) => {\n  return (\n    <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n      {title}\n    </Button>\n  );\n};\n\nexport { RouterButton };\n","const host =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:8333'\n    : 'https://j-int.herokuapp.com';\nconst authUrl = `${host}/auth`;\n\nconst UNIQUE_ID_NAME = '__rid';\n\nexport { host, authUrl, UNIQUE_ID_NAME };\n","import React from 'react';\nimport { RouterButton } from './components/RouterButton';\nimport { useHistory } from 'react-router-dom';\nimport { host, authUrl, UNIQUE_ID_NAME } from './util/config';\nimport Axios from 'axios';\nimport { Route, Redirect } from 'react-router-dom';\nimport qs from 'qs';\n\ninterface AuthButtonProps {\n  title: string;\n  status: string;\n  handleStatus: (s: string) => void;\n}\n\nconst AuthButton: React.FunctionComponent<AuthButtonProps> = ({\n  title,\n  status,\n  handleStatus,\n}) => {\n  const history = useHistory();\n\n  const w = window as any;\n  if (!w.callback) {\n    const callback = async (param: string) => {\n      if (!param) {\n        console.error('ERROR: param is invalid!');\n        return;\n      }\n\n      try {\n        // TODO: get team id, service from location.href\n        const url = window.location.href;\n        if (url.indexOf('?') <= 0) {\n          console.error('===>Can not get webhook');\n          return;\n        }\n\n        const queryString = url.split('?')[1].replace(/#\\/\\w*/g, '');\n        const parsed = qs.parse(queryString);\n        let hashParam = '';\n        if (param.indexOf('#') === 0) {\n          hashParam = param.substring(1);\n        }\n        const parsedHash = qs.parse(hashParam);\n\n        const ret = await Axios.post(`${host}/auth/token`, {\n          ...parsed,\n          ...parsedHash,\n        });\n        console.log('token', ret);\n        if (!ret || ret.status !== 200) {\n          // TODO: notify users there're something wrong with the auth\n          console.error('no token returned');\n          return;\n        }\n\n        localStorage.setItem(UNIQUE_ID_NAME, ret.data.rtk);\n        handleStatus('AUTHED');\n        history.replace('/');\n      } catch (e) {\n        console.error('error', e);\n      }\n    };\n\n    w.callback = callback;\n  }\n\n  const onClick = () => {\n    // const params = new URL(window.location.href).searchParams;\n    // window.open(`${authUrl}?webhook=${params.get('webhook')}`);\n    window.open(authUrl);\n  };\n\n  return (\n    <Route\n      render={({ location }) =>\n        status !== 'AUTHED' ? (\n          <RouterButton handleClick={onClick} title={title} />\n        ) : (\n          <Redirect to={{ pathname: '/', state: { from: location } }} />\n        )\n      }\n    />\n  );\n};\n\nexport { AuthButton };\n","import Axios from 'axios';\nimport { host } from '../util/config';\n\nasync function getTeamStatus(rtk?: string): Promise<boolean | null> {\n  if (!rtk) {\n    return null;\n  }\n\n  const { status, data } = await Axios.post(`${host}/auth`, { rtk });\n  if (status !== 200) {\n    console.error('===>Error to get events', data);\n    return null;\n  }\n\n  console.log('===>status ret', data);\n\n  return data;\n}\n\nexport { getTeamStatus };\n","import React from 'react';\nimport { Checkbox } from '@material-ui/core';\nimport { indexOf } from 'lodash';\n\nexport type BoardType = {\n  name: string;\n  desc: string;\n  id: string;\n  selected?: boolean;\n};\n\ninterface BoardCheckboxProps {\n  board: BoardType;\n  selected: string[];\n  handleSelect: (boardId: string) => void;\n}\n\nconst BoardCheckbox: React.FunctionComponent<BoardCheckboxProps> = ({\n  board,\n  selected,\n  handleSelect,\n}) => {\n  const { id, name, desc } = board;\n  const handleChange = () => {\n    handleSelect(id);\n  };\n  const checked = indexOf(selected, id) >= 0;\n  return (\n    <>\n      <Checkbox onChange={handleChange} checked={checked} />\n      <span>{`${name} ## ${desc}`}</span>\n    </>\n  );\n};\n\nexport { BoardCheckbox };\n","import Axios from 'axios';\nimport { host } from '../util/config';\nimport { BoardType } from 'src/BoardCheckbox';\n\nasync function getBoardsList(\n  rid: string,\n): Promise<{ boards: BoardType[]; selected: string[] } | null> {\n  // const { status, data } = await Axios.get(`${host}/events/${rid}`);\n  const { status, data } = await Axios.get(`${host}/events`, {\n    headers: { 'x-api-payload': rid },\n  });\n  if (status !== 200) {\n    console.error('===>Error to get events', { status, data });\n    return null;\n  }\n\n  console.log('===>Boards', data);\n  return data;\n}\n\nexport { getBoardsList };\n","import { host } from '../util/config';\nimport Axios from 'axios';\n\n/**\n * Put events to server\n */\nasync function subscribeEvents(rtk: string, events: string[]) {\n  console.log('Subscribed events', events);\n  try {\n    const data =\n      process.env.NODE_ENV === 'development'\n        ? [\n            '59e8b3e98ba30d13b18aeb20',\n            '5c3830762d4d2530c22d4ce2',\n            '5e4b4f2fd5d8d9070ad67c15',\n            '5b5fb692b996f95b67b8684c',\n          ]\n        : events;\n    const ret = await Axios.post(\n      `${host}/subscribe`,\n      { events: data },\n      { headers: { 'x-api-payload': rtk } },\n    );\n    console.log('==>RET', ret);\n    if (ret.status !== 200) {\n      console.error('ERROR subscribe events', ret);\n      return;\n    }\n\n    return ret.data.data;\n  } catch (e) {\n    console.error('ERROR: ', e);\n  }\n}\n\nexport { subscribeEvents };\n","import { Button, GridList, GridListTile, makeStyles } from '@material-ui/core';\nimport { filter, indexOf } from 'lodash';\nimport React, { useCallback, useEffect, useReducer, useState } from 'react';\nimport { BoardCheckbox, BoardType } from './BoardCheckbox';\nimport { getBoardsList } from './services/boards';\nimport { subscribeEvents } from './services/subscribeEvents';\nimport { UNIQUE_ID_NAME } from './util/config';\n\ntype ActionType = {\n  boards: BoardType[];\n  type: string;\n};\n\ntype SelectActionType = {\n  selected: string[];\n  type: 'INIT' | 'TOGGLE' | 'RESET';\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    width: '80%',\n    height: '90%',\n    backgroundColor: theme.palette.background.default,\n  },\n  gridList: {\n    width: '95%',\n    height: '100%',\n  },\n  gridChild: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    color: 'black',\n    fontSize: 14,\n  },\n}));\n\nconst boardsReducer = (boards: BoardType[], action: ActionType) => {\n  switch (action.type) {\n    case 'FETCH_DONE': {\n      // boards = action.boards || [];\n      const boards = action.boards || [];\n      return [...boards];\n    }\n    case 'RESET': {\n      return [];\n    }\n    default:\n      return boards;\n  }\n};\n\nconst selectedBoardsReducer = (\n  selectedBoards: string[],\n  action: SelectActionType,\n) => {\n  switch (action.type) {\n    case 'INIT':\n      return [...action.selected];\n    case 'TOGGLE':\n      const el = action.selected[0];\n      const exists = indexOf(selectedBoards, el) >= 0;\n      let boards: string[] = selectedBoards;\n      if (exists) {\n        boards = filter(boards, (e: string) => el !== e);\n      } else {\n        boards.push(el);\n      }\n      return [...boards];\n    case 'RESET':\n      return [];\n    default:\n      return selectedBoards;\n  }\n};\n\nconst BoardList = () => {\n  const classes = useStyles();\n  // const [boards, dispatch] = useImmerReducer(boardsReducer, []);\n  const [boards, dispatch] = useReducer(boardsReducer, []);\n  const [selectedBoards, dispatchSelected] = useReducer(\n    selectedBoardsReducer,\n    [],\n  );\n  useEffect(() => {\n    const fetchBoards = async () => {\n      try {\n        const hook = localStorage.getItem(UNIQUE_ID_NAME);\n        if (!hook) {\n          dispatch({ type: 'FETCH_DONE', boards: [] });\n          return;\n        }\n\n        const ret = await getBoardsList(hook);\n        console.log('==>effect boards', ret);\n\n        //TODO: deal with empty return or error return\n        dispatch({ type: 'FETCH_DONE', boards: ret?.boards || [] });\n        dispatchSelected({\n          type: 'INIT',\n          selected: ret?.selected || [],\n        });\n      } catch (e) {\n        console.error(e);\n        dispatch({ type: 'RESET', boards: [] });\n      }\n    };\n\n    fetchBoards();\n  }, []);\n\n  // Select/Unselect boards\n  const handleSelect = (boardId: string) => {\n    dispatchSelected({ type: 'TOGGLE', selected: [boardId] });\n  };\n\n  // Subscribe events\n  const [subscribeStatus, setSubscribeStatus] = useState('none');\n\n  const handleSubscribe = useCallback(() => {\n    const subscribe = async () => {\n      setSubscribeStatus('subscribing');\n      const teamId = localStorage.getItem(UNIQUE_ID_NAME);\n      // TODO: deal with empty team ID\n      const ret = await subscribeEvents(teamId || '', selectedBoards);\n      console.log('===>Sub ret', ret);\n      setSubscribeStatus('subscribed');\n    };\n\n    subscribe();\n  }, [selectedBoards]);\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={60} className={classes.gridList} cols={2}>\n        {boards.map((b: BoardType) => (\n          <GridListTile className={classes.gridChild} key={b.id} cols={1}>\n            <BoardCheckbox\n              board={b}\n              selected={selectedBoards}\n              handleSelect={handleSelect}\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleSubscribe}>\n        Save\n      </Button>\n      <span>{subscribeStatus}</span>\n    </div>\n  );\n};\n\nexport { BoardList };\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { BoardList } from './BoardList';\n\ninterface SourcePageProps {\n  status: string;\n}\n\nconst SourcePage = ({ status }: SourcePageProps) => {\n  // const [status, setStatus] = useState<string>('INIT');\n  // // TODO: Team ID may from a part of a url\n  // useEffect(() => {\n  //   const requestUrl = window.location.href;\n\n  //   if (requestUrl.indexOf('teamId') < 0) {\n  //     console.error('teamd id is missed');\n  //     setStatus('NOT_AUTHED');\n  //     return;\n  //   }\n\n  //   const parsed = qs.parse(window.location.href);\n  //   const teamId = parsed[Object.keys(parsed)[0]].replace(/#\\/\\w*/g, '');\n  //   // teamId = teamId.split('=')[1];\n  //   localStorage.setItem('__teamId', teamId);\n\n  //   const fetchStatus = async () => {\n  //     const ret = await getTeamStatus(teamId);\n  //     if (!ret) {\n  //       setStatus('NOT_AUTHED');\n  //       return;\n  //     }\n\n  //     setStatus('AUTHED');\n  //   };\n\n  //   fetchStatus();\n  // }, []);\n\n  return (\n    <Route\n      render={({ location }) => {\n        return status === 'AUTHED' ? (\n          <BoardList />\n        ) : (\n          <Redirect to={{ pathname: '/auth', state: { from: location } }} />\n        );\n      }}\n    />\n  );\n};\n\nexport { SourcePage };\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { AuthButton } from './AuthButton';\nimport { getTeamStatus } from './services/status';\nimport { SourcePage } from './SourcePage';\nimport { UNIQUE_ID_NAME } from './util/config';\n\nconst App = () => {\n  const [status, setStatus] = useState('INIT');\n  const rtk = localStorage.getItem(UNIQUE_ID_NAME);\n\n  useEffect(() => {\n    const fetchStatus = async () => {\n      const ret = await getTeamStatus(rtk || '');\n      if (!ret) {\n        setStatus('NOT_AUTHED');\n        return;\n      }\n\n      setStatus('AUTHED');\n    };\n\n    fetchStatus();\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-around',\n          }}\n        >\n          <Switch>\n            <Route exact path=\"/\">\n              <SourcePage status={status} />\n            </Route>\n            <Route path=\"/auth\">\n              <AuthButton\n                title=\"Auth\"\n                status={status}\n                handleStatus={setStatus}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}