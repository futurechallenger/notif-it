{"version":3,"sources":["components/RouterButton.tsx","util/config.ts","AuthButton.tsx","BoardCheckbox.tsx","services/subscribeEvents.ts","BoradsList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RouterButton","handleClick","title","Button","variant","color","onClick","host","authUrl","AuthButton","useHistory","window","open","BoardCheckbox","board","selected","handleSelect","id","name","desc","checked","indexOf","Checkbox","onChange","events","a","console","log","Trello","put","idModel","description","callbackURL","ret","error","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","width","height","backgroundColor","palette","background","default","gridList","gridChild","alignItems","fontSize","boardsReducer","boards","action","type","selectedBoardsReducer","selectedBoards","filter","e","push","BoardsList","classes","useReducer","dispatch","dispatchSelected","useEffect","members","get","username","fields","fetchBoards","boardId","className","GridList","cellHeight","cols","map","b","GridListTile","key","subscribeEvents","App","useState","style","exact","path","Boolean","location","hostname","match","callback","param","Axios","post","t","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6bf9197.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface RouterButtonProps {\n  title: string;\n  handleClick: () => void;\n}\n\nconst RouterButton: React.FunctionComponent<RouterButtonProps> = ({\n  handleClick,\n  title,\n}) => {\n  return (\n    <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n      {title}\n    </Button>\n  );\n};\n\nexport { RouterButton };\n","const host = 'http://localhost:8333';\nconst authUrl = `${host}/auth`;\n\nexport { host, authUrl };\n","import React from 'react';\nimport { RouterButton } from './components/RouterButton';\nimport { useHistory } from 'react-router-dom';\nimport { authUrl } from './util/config';\n\ninterface AuthButtonProps {\n  title: string;\n}\n\nconst AuthButton: React.FunctionComponent<AuthButtonProps> = ({ title }) => {\n  const history = useHistory();\n\n  const onClick = () => {\n    window.open(authUrl);\n  };\n\n  return <RouterButton handleClick={onClick} title={title} />;\n};\n\nexport { AuthButton };\n","import React from 'react';\nimport { Checkbox } from '@material-ui/core';\nimport { indexOf } from 'lodash';\n\nexport type BoardType = {\n  name: string;\n  desc: string;\n  id: string;\n};\n\ninterface BoardCheckboxProps {\n  board: BoardType;\n  selected: string[];\n  handleSelect: (boardId: string) => void;\n}\n\nconst BoardCheckbox: React.FunctionComponent<BoardCheckboxProps> = ({\n  board,\n  selected,\n  handleSelect,\n}) => {\n  const { id, name, desc } = board;\n  const handleChange = () => {\n    handleSelect(id);\n  };\n  const checked = indexOf(selected, id) >= 0;\n  return (\n    <>\n      <Checkbox onChange={handleChange} checked={checked} />\n      <span>{`${name} ## ${desc}`}</span>\n    </>\n  );\n};\n\nexport { BoardCheckbox };\n","async function subscribeEvents(events: string[]) {\n  console.log('Subscribed events', events);\n  console.log('Trello ins', Trello);\n  try {\n    const ret = await Trello.put('webhooks', {\n      idModel: events[0],\n      description: '',\n      callbackURL: 'https://j-int.herokuapp.com/trello/hook',\n    });\n\n    console.log('==>RET', ret);\n  } catch (e) {\n    console.error('ERROR: ', e);\n  }\n}\n\nexport { subscribeEvents };\n// https://api.trello.com/1/webhooks\n","import React, { useEffect, useReducer } from 'react';\nimport { filter, indexOf } from 'lodash';\nimport { makeStyles, GridList, GridListTile, Button } from '@material-ui/core';\nimport { BoardType, BoardCheckbox } from './BoardCheckbox';\nimport { useImmerReducer } from 'use-immer';\nimport { subscribeEvents } from './services/subscribeEvents';\n\ntype ActionType = {\n  boards: BoardType[];\n  type: string;\n};\n\ntype SelectActionType = {\n  board: string;\n  type: 'TOGGLE' | 'RESET';\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    width: '80%',\n    height: '90%',\n    backgroundColor: theme.palette.background.default,\n  },\n  gridList: {\n    width: '95%',\n    height: '100%',\n  },\n  gridChild: {\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    color: 'black',\n    fontSize: 14,\n  },\n}));\n\nconst boardsReducer = (boards: BoardType[], action: ActionType) => {\n  switch (action.type) {\n    case 'FETCH_DONE': {\n      // boards = action.boards || [];\n      const boards = action.boards || [];\n      return [...boards];\n    }\n    // return;\n    case 'RESET': {\n      return [];\n    }\n    default:\n      return boards;\n  }\n};\n\nconst selectedBoardsReducer = (\n  selectedBoards: string[],\n  action: SelectActionType,\n) => {\n  switch (action.type) {\n    case 'TOGGLE':\n      const exists = indexOf(selectedBoards, action.board) >= 0;\n      let boards: string[] = selectedBoards;\n      if (exists) {\n        boards = filter(boards, (e: string) => action.board !== e);\n      } else {\n        boards.push(action.board);\n      }\n      return [...boards];\n    case 'RESET':\n      return [];\n    default:\n      return selectedBoards;\n  }\n};\n\nconst BoardsList = () => {\n  const classes = useStyles();\n  // const [boards, dispatch] = useImmerReducer(boardsReducer, []);\n  const [boards, dispatch] = useReducer(boardsReducer, []);\n  const [selectedBoards, dispatchSelected] = useReducer(\n    selectedBoardsReducer,\n    [],\n  );\n  useEffect(() => {\n    const fetchBoards = async () => {\n      try {\n        const { username } = await Trello.members.get('me');\n        const boards = await Trello.members.get(`${username}/boards`, {\n          filter: 'open',\n          fields: 'id,name,desc',\n        });\n\n        dispatch({ type: 'FETCH_DONE', boards });\n      } catch (e) {\n        console.error(e);\n        dispatch({ type: 'RESET', boards: [] });\n      }\n    };\n\n    fetchBoards();\n  }, []);\n\n  // Select/Unselect boards\n  const handleSelect = (boardId: string) => {\n    dispatchSelected({ type: 'TOGGLE', board: boardId });\n  };\n\n  // Subscribe events\n  const handleSubscribe = () => {\n    subscribeEvents(selectedBoards);\n  };\n\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={60} className={classes.gridList} cols={2}>\n        {boards.map((b: BoardType) => (\n          <GridListTile className={classes.gridChild} key={b.id} cols={1}>\n            <BoardCheckbox\n              board={b}\n              selected={selectedBoards}\n              handleSelect={handleSelect}\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleSubscribe}>\n        Save\n      </Button>\n    </div>\n  );\n};\n\nexport { BoardsList };\n","import { Button } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { AuthButton } from './AuthButton';\nimport { BoardsList } from './BoradsList';\nimport { RouterButton } from './components/RouterButton';\n\nconst App = () => {\n  const [windowState, setWindowState] = useState('closed');\n  // useEffect(() => {}, [windowState]);\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            <Switch>\n              <Route exact path=\"/\">\n                <AuthButton title=\"Auth\" />\n              </Route>\n              <Route path=\"/content\">\n                <BoardsList />\n              </Route>\n            </Switch>\n          </div>\n        </header>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Axios from 'axios';\nimport { host } from './util/config';\n\nfunction callback(param: string) {\n  if (!param) {\n    console.error('ERROR: param is invalid!');\n    return;\n  }\n\n  try {\n    const ret = Axios.post(`${host}/callback`, { t: param });\n    console.log('token', ret);\n  } catch (e) {\n    console.error('error', e);\n  }\n}\n\n(window as any).callback = callback;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}